{"title":"Software Carpentry","markdown":{"yaml":{"title":"Software Carpentry","subtitle":"Plantilla de proyecto en R: carpetas, rutas y control del sistema","author":"Dante Conti, Sergi Ramirez, (c) IDEAI","date":"`r format(Sys.Date())`","date-modified":"`r Sys.Date()`","format":{"html":{"toc":true,"toc-depth":3,"number-sections":true,"code-fold":"show","code-tools":true,"theme":"cerulean"},"pdf":{"toc":true,"number-sections":true,"theme":"cerulean"}},"execute":{"echo":true,"eval":false,"warning":false,"message":false},"editor":"visual"},"headingText":"Objetivo","containsRefs":false,"markdown":"\n\n\nEste notebook muestra **cómo organizar un proyecto de R** y controlar operaciones de sistema:\n\n-   Estructura recomendada de carpetas: `syntax/`, `input/`, `output/`, `data/`, `temp/`, `logs/`.\n-   Manejo de **rutas relativas** con `{here}`.\n-   Mensajes y nombres de archivo dinámicos con `{glue}`.\n-   Crear y buscar ficheros (`dir.create()`, `file.path()`, `list.files()`, `fs::dir_create()`…).\n-   Redirigir salida con `sink()`.\n-   Guardar gráficos con `pdf()` y `png()`.\n-   Mini *pipeline* de ejemplo (leer → procesar → guardar).\n\n> Consejo: evita `setwd()` y usa rutas relativas con `{here}` para que tu proyecto sea 100% reproducible.\n\n# Paquetes y opciones\n\n```{r}\n#| label: setup\n#| message: true\n# Paquetes base y útiles:\npacks <- c(\"here\", \"glue\", \"fs\", \"readr\", \"dplyr\", \"ggplot2\")\nto_install <- setdiff(packs, rownames(installed.packages()))\nif (length(to_install)) install.packages(to_install, quiet = TRUE)\n\nlibrary(here)    # Rutas relativas desde la raíz del proyecto\nlibrary(glue)    # Strings con llaves {var}\nlibrary(fs)      # Operaciones de sistema \"friendly\"\nlibrary(readr)   # Lectura/escritura rápida\nlibrary(dplyr)   # Manipulación de datos\nlibrary(ggplot2) # Gráficos\n\n# Opciones útiles\noptions(\n  scipen = 999,   # menos notación científica\n  digits = 4\n)\n\n# Mostrar dónde cree {here} que está la raíz del proyecto\nhere()\n```\n\n**¿Cómo define `{here}` la raíz?**\n\n-   Buscar archivo(s) \"ancla\" (`.Rproj`, `.here`, `DESCRIPTION`, `git/`, etc).\n-   Si no encuentra, puede crear un archivo vacío llamado `.here` en la carpeta raíz del proyecto.\n\n```{r}\n#| label: crear-punto-here\n#| eval: false\n# Crea un archivo marcador para que {here} sepa que esta carpeta es la raíz:\nfile_create(\".here\")\n```\n\n# Estructura del proyecto\n\nLa estructura propuesta es la siguiente:\n\n``` graphql\n\nproject/\n├─ syntax/        # scripts R (funciones, notebooks, etc.)\n├─ input/         # insumos externos (CSV, XLSX, etc.) SOLO LECTURA\n├─ data/          # datos intermedios limpios/parquet/rds\n├─ output/        # resultados finales (tablas/figuras/listados)\n├─ temp/          # temporales desechables\n├─ logs/          # logs de ejecución\n├─ README.md\n└─ .here          # marca la raíz del proyecto p/ {here}\n\n```\n\nPara crearlo, podemos hacerlo de la siguiente forma: \n\n```{r}\n#| label: crear-carpetas\n#| eval: false\n\n# Crear la estructura de carpetas si no existe:\ndirs <- c(\"syntax\", \"input\", \"data\", \"output\", \"temp\", \"logs\")\ndir_create(path = here(dirs))\ndir_ls(here(), type = \"directory\")\n```\n\n# Estructura del proyecto\n\nUsa `here(\"carpeta\", \"sub\", \"archivo.ext\")` para **rutas portables**:\n\n```{r}\n# Construir rutas de forma segura:\nruta_input  <- here(\"input\", \"ventas_2025.csv\")\nruta_data   <- here(\"data\",  \"ventas_limpio.rds\")\nruta_salida <- here(\"output\",\"resumen_ventas.csv\")\n\nruta_input\nruta_data\nruta_salida\n\n# Con base R: file.path() también es portable\nfile.path(\"input\", \"ventas_2025.csv\")\n```\n\nCon `{glue}` puedes crear nombres dinámicos: \n\n```{r}\n#| label: glue-ejemplos\nanio <- 2025; mes <- 9\nnombre_csv <- glue(\"ventas_{anio}-{sprintf('%02d', mes)}.csv\")\nhere(\"input\", nombre_csv)\n```\n\n# Crear y escribir archivos\n\n```{r}\n#| label: escribir-ejemplo\n#| eval: false\n# Datos de ejemplo:\ndf <- tibble::tibble(\n  id = 1:5,\n  fecha = as.Date(\"2025-09-01\") + 0:4,\n  ventas = c(100, 80, 95, 120, 110)\n)\n\n# Guardar como CSV en output/\nwrite_csv(df, here(\"output\", \"tabla_ejemplo.csv\"))\n\n# Guardar como RDS en data/\nsaveRDS(df, here(\"data\", \"tabla_ejemplo.rds\"))\n```\n\n# Búsqueda de ficheros\n\n`list.files()` (base) y `fs::dir_ls()` (recursivo, con *globbing*):\n\n```{r}\n# Listado simple\nlist.files(here(\"output\"))\n\n# Listado recursivo con patrón:\ndir_ls(here(), recurse = TRUE, glob = \"output/*.csv\")\n\n# Buscar por ext. en múltiples carpetas:\ndir_ls(here(c(\"input\",\"data\",\"output\")), recurse = TRUE, \n       regexp = \"\\\\.(csv|rds)$\")\n```\n\n# Redirección de salida con `sink()`\n\n```{r}\n#| label: sink-ejemplo\n#| eval: false\nlog_path <- here(\"logs\", glue(\"log_{format(Sys.time(), '%Y%m%d_%H%M%S')}.txt\"))\n\nsink(log_path, split = TRUE)      # split=TRUE => también muestra en consola\ncat(\"=== INICIO ===\\n\")\nprint(sessionInfo())\ncat(\"Una línea cualquiera\\n\")\nsink()  # IMPORTANTÍSIMO: cerrar el sink\n\n# Revisa el contenido del log:\nreadLines(log_path, n = 8)\n```\n\n⚠️ Cierra siempre el `sink()` con `sink()` (sin argumentos) o usa `on.exit(sink())` dentro de una función para no “bloquear” la consola.\n\n# Dispositivos gráficos: `pdf()` y `png()`\n\nPuedes abrir un **dispositivo** gráfico, dibujar y cerrado con `dev.off()`.\n\n```{r}\n#| label: dispositivo-pdf\n#| eval: false\npdf(here(\"output\", \"grafico_demo.pdf\"), width = 7, height = 5)\nplot(cars, main = \"Gráfico base R - cars\")\ndev.off()\n\n# PNG con resolución\npng(here(\"output\", \"grafico_demo.png\"), width = 1200, height = 900, res = 150)\nplot(pressure, main = \"Gráfico base R - pressure\")\ndev.off()\n```\n\nCon **ggplot2**:\n\n```{r}\n#| label: ggsave-demo\n#| eval: false\np <- ggplot(mtcars, aes(disp, mpg)) + geom_point() +\n  labs(title = \"Relación cilindrada vs. mpg\")\n\n# Guardar directamente\nggsave(filename = here(\"output\", \"mtcars_disp_mpg.png\"), plot = p,\n       width = 7, height = 5, dpi = 150)\n\n# También PDF\nggsave(filename = here(\"output\", \"mtcars_disp_mpg.pdf\"), plot = p,\n       width = 7, height = 5)\n```\n\n# Buenas prácticas con `{here}`\n\n-   Coloca un archivo `.here` o un `.Rproj` en la raíz\n-   **Nunca** uses `setwd()` dentro de scripts reutilizables.\n-   Escribe funciones que reciban rutas **como argumento** o que construyan rutas con `here()`.\n\n```{r}\n# Función ejemplo usando here()\nlee_input <- function(nombre) {\n  readr::read_csv(here(\"input\", nombre), show_col_types = FALSE)\n}\n\n# Uso:\n# df <- lee_input(\"ventas_2025.csv\")\n```\n\n# Mensajes y nombres con `{glue}`\n\n```{r}\n# Glue para strings explicativos\narchivo <- \"ventas_2025.csv\"\nmensaje <- glue(\"Leyendo el archivo '{archivo}' desde {here('input')}\")\nmensaje\n```\n\n`glue()` evalúa expresiones dentro de `{}`:\n\n```{r}\nclientes <- 1250\nglue(\"Este mes se han registrado {clientes} clientes (Δ = {clientes - 1200}).\")\n```\n\n# Mini pipeline: leer → procesar → guardar\n\nEjemplo autocontenido que crea un CSV de entrada, lo procesa y guarda resultados.\n\n```{r}\n#| label: mini-pipeline\n#| eval: false\n# 1) Crear un CSV de ejemplo en input/\ndir_create(here(\"input\"))\ntoy <- tibble::tibble(\n  id = 1:10,\n  fecha = as.Date(\"2025-09-01\") + 0:9,\n  ventas = sample(80:150, 10, replace = TRUE)\n)\nwrite_csv(toy, here(\"input\", \"toy_ventas.csv\"))\n\n# 2) Leer, procesar y registrar\nlog_path <- here(\"logs\", \"mini_pipeline.log\")\nsink(log_path, split = TRUE)\ncat(\"== MINI PIPELINE ==\\n\")\n\nraw <- read_csv(here(\"input\", \"toy_ventas.csv\"), show_col_types = FALSE)\ncat(glue(\"Leídas {nrow(raw)} filas.\\n\"))\n\nproc <- raw |>\n  mutate(\n    semana = format(fecha, \"%Y-%W\"),\n    ventas_norm = scale(ventas)[,1]\n  ) |>\n  group_by(semana) |>\n  summarise(ventas_media = mean(ventas), .groups = \"drop\")\n\ncat(glue(\"Semanas agregadas: {nrow(proc)}\\n\"))\n\n# 3) Guardar resultados\nwrite_csv(proc, here(\"output\", \"resumen_semanal.csv\"))\nsaveRDS(proc, here(\"data\", \"resumen_semanal.rds\"))\ncat(\"Archivos guardados en output/ y data/\\n\")\nsink()\n\n# 4) Graficar y guardar\np <- ggplot(raw, aes(fecha, ventas)) + geom_line() +\n  labs(title = \"Ventas diarias (toy)\", x = \"Fecha\", y = \"Ventas\")\nggsave(here(\"output\", \"ventas_toy.png\"), plot = p, width = 7, \n       height = 5, dpi = 150)\n```\n\n# Utilidades (helpers) para tus scripts de `syntax/`\n\n```{r}\n#| label: helpers\n#| eval: false\n# Guardar en syntax/helpers.R y luego source(\"syntax/helpers.R\") si quieres\n\ninit_log <- function(prefix = \"run\") {\n  dir_create(here(\"logs\"))\n  path <- here(\"logs\", \n               glue(\"{prefix}_{format(Sys.time(), '%Y%m%d_%H%M%S')}.log\"))\n  sink(path, split = TRUE)\n  cat(glue(\"[{Sys.time()}] INICIO\\n\"))\n  return(path)\n}\n\nclose_log <- function() {\n  cat(glue(\"[{Sys.time()}] FIN\\n\"))\n  sink()\n}\n\nsafe_dir <- function(...) {\n  # Crea una ruta y la carpeta si no existe\n  path <- here(...)\n  dir_create(dirname(path))\n  return(path)\n}\n\nsave_table <- function(df, ..., name, ext = \"csv\") {\n  # Guarda tabla df en output/ con nombre dinámico\n  base <- glue(\"{name}.{ext}\")\n  path <- safe_dir(\"output\", base)\n  if (ext == \"csv\") readr::write_csv(df, path)\n  if (ext == \"rds\") saveRDS(df, sub(\"\\\\.csv$\", \".rds\", path))\n  invisible(path)\n}\n```\n\n# Pautas de versión y limpieza\n\n-   Todo lo que **no** sea fuente, mételo bajo control (ej: borrar `/temp/` al finalizar).\n-   Usa `git` para versionar scripts y notebooks.\n-   Separa **lectura** (`input/`) de **resultados** (`output/`) y **datos de trabajo** (`data/`).\n\n```{r}\n#| label: limpiar-temp\n#| eval: false\n# Limpieza de temporales\nif (dir_exists(here(\"temp\"))) {\n  file_delete(dir_ls(here(\"temp\"), recurse = TRUE, type = \"file\"))\n}\n```\n\n# Apéndice: alternativas útiles\n\n-   `fs::file_copy()`, `fs::file_move()`, `fs::file_delete()` para copiar/mover/borrar.\n-   `Sys.getenv(\"VAR\")` para leer variables de entorno.\n-   `withr::with_dir()` para ejecutar código en otra dir sin cambiar tu wd global.\n\n```{r}\n#| label: fs-extras\n#| eval: false\n# Copiar un archivo de ejemplo\nfs::file_copy(here(\"output\", \"tabla_ejemplo.csv\"),\n              here(\"temp\", \"copia_tabla.csv\"),\n              overwrite = TRUE)\n\n# Variables de entorno\nSys.getenv(\"HOME\")\n```\n\n# Session info\n\n```{r}\nsessionInfo()\n```\n\n","srcMarkdownNoYaml":"\n\n# Objetivo\n\nEste notebook muestra **cómo organizar un proyecto de R** y controlar operaciones de sistema:\n\n-   Estructura recomendada de carpetas: `syntax/`, `input/`, `output/`, `data/`, `temp/`, `logs/`.\n-   Manejo de **rutas relativas** con `{here}`.\n-   Mensajes y nombres de archivo dinámicos con `{glue}`.\n-   Crear y buscar ficheros (`dir.create()`, `file.path()`, `list.files()`, `fs::dir_create()`…).\n-   Redirigir salida con `sink()`.\n-   Guardar gráficos con `pdf()` y `png()`.\n-   Mini *pipeline* de ejemplo (leer → procesar → guardar).\n\n> Consejo: evita `setwd()` y usa rutas relativas con `{here}` para que tu proyecto sea 100% reproducible.\n\n# Paquetes y opciones\n\n```{r}\n#| label: setup\n#| message: true\n# Paquetes base y útiles:\npacks <- c(\"here\", \"glue\", \"fs\", \"readr\", \"dplyr\", \"ggplot2\")\nto_install <- setdiff(packs, rownames(installed.packages()))\nif (length(to_install)) install.packages(to_install, quiet = TRUE)\n\nlibrary(here)    # Rutas relativas desde la raíz del proyecto\nlibrary(glue)    # Strings con llaves {var}\nlibrary(fs)      # Operaciones de sistema \"friendly\"\nlibrary(readr)   # Lectura/escritura rápida\nlibrary(dplyr)   # Manipulación de datos\nlibrary(ggplot2) # Gráficos\n\n# Opciones útiles\noptions(\n  scipen = 999,   # menos notación científica\n  digits = 4\n)\n\n# Mostrar dónde cree {here} que está la raíz del proyecto\nhere()\n```\n\n**¿Cómo define `{here}` la raíz?**\n\n-   Buscar archivo(s) \"ancla\" (`.Rproj`, `.here`, `DESCRIPTION`, `git/`, etc).\n-   Si no encuentra, puede crear un archivo vacío llamado `.here` en la carpeta raíz del proyecto.\n\n```{r}\n#| label: crear-punto-here\n#| eval: false\n# Crea un archivo marcador para que {here} sepa que esta carpeta es la raíz:\nfile_create(\".here\")\n```\n\n# Estructura del proyecto\n\nLa estructura propuesta es la siguiente:\n\n``` graphql\n\nproject/\n├─ syntax/        # scripts R (funciones, notebooks, etc.)\n├─ input/         # insumos externos (CSV, XLSX, etc.) SOLO LECTURA\n├─ data/          # datos intermedios limpios/parquet/rds\n├─ output/        # resultados finales (tablas/figuras/listados)\n├─ temp/          # temporales desechables\n├─ logs/          # logs de ejecución\n├─ README.md\n└─ .here          # marca la raíz del proyecto p/ {here}\n\n```\n\nPara crearlo, podemos hacerlo de la siguiente forma: \n\n```{r}\n#| label: crear-carpetas\n#| eval: false\n\n# Crear la estructura de carpetas si no existe:\ndirs <- c(\"syntax\", \"input\", \"data\", \"output\", \"temp\", \"logs\")\ndir_create(path = here(dirs))\ndir_ls(here(), type = \"directory\")\n```\n\n# Estructura del proyecto\n\nUsa `here(\"carpeta\", \"sub\", \"archivo.ext\")` para **rutas portables**:\n\n```{r}\n# Construir rutas de forma segura:\nruta_input  <- here(\"input\", \"ventas_2025.csv\")\nruta_data   <- here(\"data\",  \"ventas_limpio.rds\")\nruta_salida <- here(\"output\",\"resumen_ventas.csv\")\n\nruta_input\nruta_data\nruta_salida\n\n# Con base R: file.path() también es portable\nfile.path(\"input\", \"ventas_2025.csv\")\n```\n\nCon `{glue}` puedes crear nombres dinámicos: \n\n```{r}\n#| label: glue-ejemplos\nanio <- 2025; mes <- 9\nnombre_csv <- glue(\"ventas_{anio}-{sprintf('%02d', mes)}.csv\")\nhere(\"input\", nombre_csv)\n```\n\n# Crear y escribir archivos\n\n```{r}\n#| label: escribir-ejemplo\n#| eval: false\n# Datos de ejemplo:\ndf <- tibble::tibble(\n  id = 1:5,\n  fecha = as.Date(\"2025-09-01\") + 0:4,\n  ventas = c(100, 80, 95, 120, 110)\n)\n\n# Guardar como CSV en output/\nwrite_csv(df, here(\"output\", \"tabla_ejemplo.csv\"))\n\n# Guardar como RDS en data/\nsaveRDS(df, here(\"data\", \"tabla_ejemplo.rds\"))\n```\n\n# Búsqueda de ficheros\n\n`list.files()` (base) y `fs::dir_ls()` (recursivo, con *globbing*):\n\n```{r}\n# Listado simple\nlist.files(here(\"output\"))\n\n# Listado recursivo con patrón:\ndir_ls(here(), recurse = TRUE, glob = \"output/*.csv\")\n\n# Buscar por ext. en múltiples carpetas:\ndir_ls(here(c(\"input\",\"data\",\"output\")), recurse = TRUE, \n       regexp = \"\\\\.(csv|rds)$\")\n```\n\n# Redirección de salida con `sink()`\n\n```{r}\n#| label: sink-ejemplo\n#| eval: false\nlog_path <- here(\"logs\", glue(\"log_{format(Sys.time(), '%Y%m%d_%H%M%S')}.txt\"))\n\nsink(log_path, split = TRUE)      # split=TRUE => también muestra en consola\ncat(\"=== INICIO ===\\n\")\nprint(sessionInfo())\ncat(\"Una línea cualquiera\\n\")\nsink()  # IMPORTANTÍSIMO: cerrar el sink\n\n# Revisa el contenido del log:\nreadLines(log_path, n = 8)\n```\n\n⚠️ Cierra siempre el `sink()` con `sink()` (sin argumentos) o usa `on.exit(sink())` dentro de una función para no “bloquear” la consola.\n\n# Dispositivos gráficos: `pdf()` y `png()`\n\nPuedes abrir un **dispositivo** gráfico, dibujar y cerrado con `dev.off()`.\n\n```{r}\n#| label: dispositivo-pdf\n#| eval: false\npdf(here(\"output\", \"grafico_demo.pdf\"), width = 7, height = 5)\nplot(cars, main = \"Gráfico base R - cars\")\ndev.off()\n\n# PNG con resolución\npng(here(\"output\", \"grafico_demo.png\"), width = 1200, height = 900, res = 150)\nplot(pressure, main = \"Gráfico base R - pressure\")\ndev.off()\n```\n\nCon **ggplot2**:\n\n```{r}\n#| label: ggsave-demo\n#| eval: false\np <- ggplot(mtcars, aes(disp, mpg)) + geom_point() +\n  labs(title = \"Relación cilindrada vs. mpg\")\n\n# Guardar directamente\nggsave(filename = here(\"output\", \"mtcars_disp_mpg.png\"), plot = p,\n       width = 7, height = 5, dpi = 150)\n\n# También PDF\nggsave(filename = here(\"output\", \"mtcars_disp_mpg.pdf\"), plot = p,\n       width = 7, height = 5)\n```\n\n# Buenas prácticas con `{here}`\n\n-   Coloca un archivo `.here` o un `.Rproj` en la raíz\n-   **Nunca** uses `setwd()` dentro de scripts reutilizables.\n-   Escribe funciones que reciban rutas **como argumento** o que construyan rutas con `here()`.\n\n```{r}\n# Función ejemplo usando here()\nlee_input <- function(nombre) {\n  readr::read_csv(here(\"input\", nombre), show_col_types = FALSE)\n}\n\n# Uso:\n# df <- lee_input(\"ventas_2025.csv\")\n```\n\n# Mensajes y nombres con `{glue}`\n\n```{r}\n# Glue para strings explicativos\narchivo <- \"ventas_2025.csv\"\nmensaje <- glue(\"Leyendo el archivo '{archivo}' desde {here('input')}\")\nmensaje\n```\n\n`glue()` evalúa expresiones dentro de `{}`:\n\n```{r}\nclientes <- 1250\nglue(\"Este mes se han registrado {clientes} clientes (Δ = {clientes - 1200}).\")\n```\n\n# Mini pipeline: leer → procesar → guardar\n\nEjemplo autocontenido que crea un CSV de entrada, lo procesa y guarda resultados.\n\n```{r}\n#| label: mini-pipeline\n#| eval: false\n# 1) Crear un CSV de ejemplo en input/\ndir_create(here(\"input\"))\ntoy <- tibble::tibble(\n  id = 1:10,\n  fecha = as.Date(\"2025-09-01\") + 0:9,\n  ventas = sample(80:150, 10, replace = TRUE)\n)\nwrite_csv(toy, here(\"input\", \"toy_ventas.csv\"))\n\n# 2) Leer, procesar y registrar\nlog_path <- here(\"logs\", \"mini_pipeline.log\")\nsink(log_path, split = TRUE)\ncat(\"== MINI PIPELINE ==\\n\")\n\nraw <- read_csv(here(\"input\", \"toy_ventas.csv\"), show_col_types = FALSE)\ncat(glue(\"Leídas {nrow(raw)} filas.\\n\"))\n\nproc <- raw |>\n  mutate(\n    semana = format(fecha, \"%Y-%W\"),\n    ventas_norm = scale(ventas)[,1]\n  ) |>\n  group_by(semana) |>\n  summarise(ventas_media = mean(ventas), .groups = \"drop\")\n\ncat(glue(\"Semanas agregadas: {nrow(proc)}\\n\"))\n\n# 3) Guardar resultados\nwrite_csv(proc, here(\"output\", \"resumen_semanal.csv\"))\nsaveRDS(proc, here(\"data\", \"resumen_semanal.rds\"))\ncat(\"Archivos guardados en output/ y data/\\n\")\nsink()\n\n# 4) Graficar y guardar\np <- ggplot(raw, aes(fecha, ventas)) + geom_line() +\n  labs(title = \"Ventas diarias (toy)\", x = \"Fecha\", y = \"Ventas\")\nggsave(here(\"output\", \"ventas_toy.png\"), plot = p, width = 7, \n       height = 5, dpi = 150)\n```\n\n# Utilidades (helpers) para tus scripts de `syntax/`\n\n```{r}\n#| label: helpers\n#| eval: false\n# Guardar en syntax/helpers.R y luego source(\"syntax/helpers.R\") si quieres\n\ninit_log <- function(prefix = \"run\") {\n  dir_create(here(\"logs\"))\n  path <- here(\"logs\", \n               glue(\"{prefix}_{format(Sys.time(), '%Y%m%d_%H%M%S')}.log\"))\n  sink(path, split = TRUE)\n  cat(glue(\"[{Sys.time()}] INICIO\\n\"))\n  return(path)\n}\n\nclose_log <- function() {\n  cat(glue(\"[{Sys.time()}] FIN\\n\"))\n  sink()\n}\n\nsafe_dir <- function(...) {\n  # Crea una ruta y la carpeta si no existe\n  path <- here(...)\n  dir_create(dirname(path))\n  return(path)\n}\n\nsave_table <- function(df, ..., name, ext = \"csv\") {\n  # Guarda tabla df en output/ con nombre dinámico\n  base <- glue(\"{name}.{ext}\")\n  path <- safe_dir(\"output\", base)\n  if (ext == \"csv\") readr::write_csv(df, path)\n  if (ext == \"rds\") saveRDS(df, sub(\"\\\\.csv$\", \".rds\", path))\n  invisible(path)\n}\n```\n\n# Pautas de versión y limpieza\n\n-   Todo lo que **no** sea fuente, mételo bajo control (ej: borrar `/temp/` al finalizar).\n-   Usa `git` para versionar scripts y notebooks.\n-   Separa **lectura** (`input/`) de **resultados** (`output/`) y **datos de trabajo** (`data/`).\n\n```{r}\n#| label: limpiar-temp\n#| eval: false\n# Limpieza de temporales\nif (dir_exists(here(\"temp\"))) {\n  file_delete(dir_ls(here(\"temp\"), recurse = TRUE, type = \"file\"))\n}\n```\n\n# Apéndice: alternativas útiles\n\n-   `fs::file_copy()`, `fs::file_move()`, `fs::file_delete()` para copiar/mover/borrar.\n-   `Sys.getenv(\"VAR\")` para leer variables de entorno.\n-   `withr::with_dir()` para ejecutar código en otra dir sin cambiar tu wd global.\n\n```{r}\n#| label: fs-extras\n#| eval: false\n# Copiar un archivo de ejemplo\nfs::file_copy(here(\"output\", \"tabla_ejemplo.csv\"),\n              here(\"temp\", \"copia_tabla.csv\"),\n              overwrite = TRUE)\n\n# Variables de entorno\nSys.getenv(\"HOME\")\n```\n\n# Session info\n\n```{r}\nsessionInfo()\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":3,"number-sections":true,"output-file":"SoftwareCarpentry.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.37","theme":"cerulean","title":"Software Carpentry","subtitle":"Plantilla de proyecto en R: carpetas, rutas y control del sistema","author":"Dante Conti, Sergi Ramirez, (c) IDEAI","date":"`r format(Sys.Date())`","date-modified":"`r Sys.Date()`","editor":"visual"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","toc":true,"number-sections":true,"output-file":"SoftwareCarpentry.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"title":"Software Carpentry","subtitle":"Plantilla de proyecto en R: carpetas, rutas y control del sistema","author":"Dante Conti, Sergi Ramirez, (c) IDEAI","date":"`r format(Sys.Date())`","date-modified":"`r Sys.Date()`","editor":"visual","theme":"cerulean"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html"]}
{
  "hash": "312ab65049b0d21f76cbc8aa10c0f937",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Software Carpentry\"\nsubtitle: \"Plantilla de proyecto en R: carpetas, rutas y control del sistema\"\nauthor: Dante Conti, Sergi Ramirez, (c) IDEAI\ndate: \"2025-09-21\"\ndate-modified: \"2025-09-21\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    number-sections: true\n    code-fold: show\n    code-tools: true\n    theme: cerulean\n  pdf:\n    toc: true\n    number-sections: true\n    theme: cerulean\nexecute:\n  echo: true\n  eval: false\n  warning: false\n  message: false\neditor: visual\n---\n\n\n\n\n\n\n\n\n\n\n# Objetivo\n\nEste notebook muestra **cómo organizar un proyecto de R** y controlar operaciones de sistema:\n\n-   Estructura recomendada de carpetas: `syntax/`, `input/`, `output/`, `data/`, `temp/`, `logs/`.\n-   Manejo de **rutas relativas** con `{here}`.\n-   Mensajes y nombres de archivo dinámicos con `{glue}`.\n-   Crear y buscar ficheros (`dir.create()`, `file.path()`, `list.files()`, `fs::dir_create()`…).\n-   Redirigir salida con `sink()`.\n-   Guardar gráficos con `pdf()` y `png()`.\n-   Mini *pipeline* de ejemplo (leer → procesar → guardar).\n\n> Consejo: evita `setwd()` y usa rutas relativas con `{here}` para que tu proyecto sea 100% reproducible.\n\n# Paquetes y opciones\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Paquetes base y útiles:\npacks <- c(\"here\", \"glue\", \"fs\", \"readr\", \"dplyr\", \"ggplot2\")\nto_install <- setdiff(packs, rownames(installed.packages()))\nif (length(to_install)) install.packages(to_install, quiet = TRUE)\n\nlibrary(here)    # Rutas relativas desde la raíz del proyecto\nlibrary(glue)    # Strings con llaves {var}\nlibrary(fs)      # Operaciones de sistema \"friendly\"\nlibrary(readr)   # Lectura/escritura rápida\nlibrary(dplyr)   # Manipulación de datos\nlibrary(ggplot2) # Gráficos\n\n# Opciones útiles\noptions(\n  scipen = 999,   # menos notación científica\n  digits = 4\n)\n\n# Mostrar dónde cree {here} que está la raíz del proyecto\nhere()\n```\n:::\n\n\n\n\n\n\n\n\n\n\n**¿Cómo define `{here}` la raíz?**\n\n-   Buscar archivo(s) \"ancla\" (`.Rproj`, `.here`, `DESCRIPTION`, `git/`, etc).\n-   Si no encuentra, puede crear un archivo vacío llamado `.here` en la carpeta raíz del proyecto.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crea un archivo marcador para que {here} sepa que esta carpeta es la raíz:\nfile_create(\".here\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Estructura del proyecto\n\nLa estructura propuesta es la siguiente:\n\n``` graphql\n\nproject/\n├─ syntax/        # scripts R (funciones, notebooks, etc.)\n├─ input/         # insumos externos (CSV, XLSX, etc.) SOLO LECTURA\n├─ data/          # datos intermedios limpios/parquet/rds\n├─ output/        # resultados finales (tablas/figuras/listados)\n├─ temp/          # temporales desechables\n├─ logs/          # logs de ejecución\n├─ README.md\n└─ .here          # marca la raíz del proyecto p/ {here}\n\n```\n\nPara crearlo, podemos hacerlo de la siguiente forma: \n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear la estructura de carpetas si no existe:\ndirs <- c(\"syntax\", \"input\", \"data\", \"output\", \"temp\", \"logs\")\ndir_create(path = here(dirs))\ndir_ls(here(), type = \"directory\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Estructura del proyecto\n\nUsa `here(\"carpeta\", \"sub\", \"archivo.ext\")` para **rutas portables**:\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Construir rutas de forma segura:\nruta_input  <- here(\"input\", \"ventas_2025.csv\")\nruta_data   <- here(\"data\",  \"ventas_limpio.rds\")\nruta_salida <- here(\"output\",\"resumen_ventas.csv\")\n\nruta_input\nruta_data\nruta_salida\n\n# Con base R: file.path() también es portable\nfile.path(\"input\", \"ventas_2025.csv\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\nCon `{glue}` puedes crear nombres dinámicos: \n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanio <- 2025; mes <- 9\nnombre_csv <- glue(\"ventas_{anio}-{sprintf('%02d', mes)}.csv\")\nhere(\"input\", nombre_csv)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Crear y escribir archivos\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Datos de ejemplo:\ndf <- tibble::tibble(\n  id = 1:5,\n  fecha = as.Date(\"2025-09-01\") + 0:4,\n  ventas = c(100, 80, 95, 120, 110)\n)\n\n# Guardar como CSV en output/\nwrite_csv(df, here(\"output\", \"tabla_ejemplo.csv\"))\n\n# Guardar como RDS en data/\nsaveRDS(df, here(\"data\", \"tabla_ejemplo.rds\"))\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Búsqueda de ficheros\n\n`list.files()` (base) y `fs::dir_ls()` (recursivo, con *globbing*):\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Listado simple\nlist.files(here(\"output\"))\n\n# Listado recursivo con patrón:\ndir_ls(here(), recurse = TRUE, glob = \"output/*.csv\")\n\n# Buscar por ext. en múltiples carpetas:\ndir_ls(here(c(\"input\",\"data\",\"output\")), recurse = TRUE, \n       regexp = \"\\\\.(csv|rds)$\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Redirección de salida con `sink()`\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_path <- here(\"logs\", glue(\"log_{format(Sys.time(), '%Y%m%d_%H%M%S')}.txt\"))\n\nsink(log_path, split = TRUE)      # split=TRUE => también muestra en consola\ncat(\"=== INICIO ===\\n\")\nprint(sessionInfo())\ncat(\"Una línea cualquiera\\n\")\nsink()  # IMPORTANTÍSIMO: cerrar el sink\n\n# Revisa el contenido del log:\nreadLines(log_path, n = 8)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n⚠️ Cierra siempre el `sink()` con `sink()` (sin argumentos) o usa `on.exit(sink())` dentro de una función para no “bloquear” la consola.\n\n# Dispositivos gráficos: `pdf()` y `png()`\n\nPuedes abrir un **dispositivo** gráfico, dibujar y cerrado con `dev.off()`.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdf(here(\"output\", \"grafico_demo.pdf\"), width = 7, height = 5)\nplot(cars, main = \"Gráfico base R - cars\")\ndev.off()\n\n# PNG con resolución\npng(here(\"output\", \"grafico_demo.png\"), width = 1200, height = 900, res = 150)\nplot(pressure, main = \"Gráfico base R - pressure\")\ndev.off()\n```\n:::\n\n\n\n\n\n\n\n\n\n\nCon **ggplot2**:\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(mtcars, aes(disp, mpg)) + geom_point() +\n  labs(title = \"Relación cilindrada vs. mpg\")\n\n# Guardar directamente\nggsave(filename = here(\"output\", \"mtcars_disp_mpg.png\"), plot = p,\n       width = 7, height = 5, dpi = 150)\n\n# También PDF\nggsave(filename = here(\"output\", \"mtcars_disp_mpg.pdf\"), plot = p,\n       width = 7, height = 5)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Buenas prácticas con `{here}`\n\n-   Coloca un archivo `.here` o un `.Rproj` en la raíz\n-   **Nunca** uses `setwd()` dentro de scripts reutilizables.\n-   Escribe funciones que reciban rutas **como argumento** o que construyan rutas con `here()`.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Función ejemplo usando here()\nlee_input <- function(nombre) {\n  readr::read_csv(here(\"input\", nombre), show_col_types = FALSE)\n}\n\n# Uso:\n# df <- lee_input(\"ventas_2025.csv\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Mensajes y nombres con `{glue}`\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Glue para strings explicativos\narchivo <- \"ventas_2025.csv\"\nmensaje <- glue(\"Leyendo el archivo '{archivo}' desde {here('input')}\")\nmensaje\n```\n:::\n\n\n\n\n\n\n\n\n\n\n`glue()` evalúa expresiones dentro de `{}`:\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclientes <- 1250\nglue(\"Este mes se han registrado {clientes} clientes (Δ = {clientes - 1200}).\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Mini pipeline: leer → procesar → guardar\n\nEjemplo autocontenido que crea un CSV de entrada, lo procesa y guarda resultados.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) Crear un CSV de ejemplo en input/\ndir_create(here(\"input\"))\ntoy <- tibble::tibble(\n  id = 1:10,\n  fecha = as.Date(\"2025-09-01\") + 0:9,\n  ventas = sample(80:150, 10, replace = TRUE)\n)\nwrite_csv(toy, here(\"input\", \"toy_ventas.csv\"))\n\n# 2) Leer, procesar y registrar\nlog_path <- here(\"logs\", \"mini_pipeline.log\")\nsink(log_path, split = TRUE)\ncat(\"== MINI PIPELINE ==\\n\")\n\nraw <- read_csv(here(\"input\", \"toy_ventas.csv\"), show_col_types = FALSE)\ncat(glue(\"Leídas {nrow(raw)} filas.\\n\"))\n\nproc <- raw |>\n  mutate(\n    semana = format(fecha, \"%Y-%W\"),\n    ventas_norm = scale(ventas)[,1]\n  ) |>\n  group_by(semana) |>\n  summarise(ventas_media = mean(ventas), .groups = \"drop\")\n\ncat(glue(\"Semanas agregadas: {nrow(proc)}\\n\"))\n\n# 3) Guardar resultados\nwrite_csv(proc, here(\"output\", \"resumen_semanal.csv\"))\nsaveRDS(proc, here(\"data\", \"resumen_semanal.rds\"))\ncat(\"Archivos guardados en output/ y data/\\n\")\nsink()\n\n# 4) Graficar y guardar\np <- ggplot(raw, aes(fecha, ventas)) + geom_line() +\n  labs(title = \"Ventas diarias (toy)\", x = \"Fecha\", y = \"Ventas\")\nggsave(here(\"output\", \"ventas_toy.png\"), plot = p, width = 7, \n       height = 5, dpi = 150)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Utilidades (helpers) para tus scripts de `syntax/`\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Guardar en syntax/helpers.R y luego source(\"syntax/helpers.R\") si quieres\n\ninit_log <- function(prefix = \"run\") {\n  dir_create(here(\"logs\"))\n  path <- here(\"logs\", \n               glue(\"{prefix}_{format(Sys.time(), '%Y%m%d_%H%M%S')}.log\"))\n  sink(path, split = TRUE)\n  cat(glue(\"[{Sys.time()}] INICIO\\n\"))\n  return(path)\n}\n\nclose_log <- function() {\n  cat(glue(\"[{Sys.time()}] FIN\\n\"))\n  sink()\n}\n\nsafe_dir <- function(...) {\n  # Crea una ruta y la carpeta si no existe\n  path <- here(...)\n  dir_create(dirname(path))\n  return(path)\n}\n\nsave_table <- function(df, ..., name, ext = \"csv\") {\n  # Guarda tabla df en output/ con nombre dinámico\n  base <- glue(\"{name}.{ext}\")\n  path <- safe_dir(\"output\", base)\n  if (ext == \"csv\") readr::write_csv(df, path)\n  if (ext == \"rds\") saveRDS(df, sub(\"\\\\.csv$\", \".rds\", path))\n  invisible(path)\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Pautas de versión y limpieza\n\n-   Todo lo que **no** sea fuente, mételo bajo control (ej: borrar `/temp/` al finalizar).\n-   Usa `git` para versionar scripts y notebooks.\n-   Separa **lectura** (`input/`) de **resultados** (`output/`) y **datos de trabajo** (`data/`).\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Limpieza de temporales\nif (dir_exists(here(\"temp\"))) {\n  file_delete(dir_ls(here(\"temp\"), recurse = TRUE, type = \"file\"))\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Apéndice: alternativas útiles\n\n-   `fs::file_copy()`, `fs::file_move()`, `fs::file_delete()` para copiar/mover/borrar.\n-   `Sys.getenv(\"VAR\")` para leer variables de entorno.\n-   `withr::with_dir()` para ejecutar código en otra dir sin cambiar tu wd global.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Copiar un archivo de ejemplo\nfs::file_copy(here(\"output\", \"tabla_ejemplo.csv\"),\n              here(\"temp\", \"copia_tabla.csv\"),\n              overwrite = TRUE)\n\n# Variables de entorno\nSys.getenv(\"HOME\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Session info\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n:::\n",
    "supporting": [
      "SoftwareCarpentry_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}
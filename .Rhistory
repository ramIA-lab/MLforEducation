datos[, c("Time", "Date")] <- NULL
#| label: eliminar-variables
#| echo: true
#| warning: false
#| message: false
#| error: false
datos[, c("Time", "Date")] <- NULL
#| label: lectura-datos
#| echo: false
#| warning: false
#| message: false
#| error: false
# Lectura de los datos
path <- "E:/PROYECTOS/ramIA-lab_repositorio/MLforEducation/MLforEducation/material/Preprocessing/"
datos <- read.csv(paste0(path, "Coffe_sales.csv"))
head(datos)
#| label: tipo-variables
#| echo: true
#| warning: false
#| message: false
#| error: false
clases <- sapply(datos, class)
varNum <- names(clases)[which(clases %in% c("numeric", "integer"))]
varCat <- names(clases)[which(clases %in% c("character", "factor"))]
#| label: eliminar-variables
#| echo: false
#| warning: false
#| message: false
#| error: false
datos[, c("Time", "Date")] <- NULL
clases <- sapply(datos, class)
varNum <- names(clases)[which(clases %in% c("numeric", "integer"))]
varCat <- names(clases)[which(clases %in% c("character", "factor"))]
library(psych)
psych::describe(datos[, varNum])
for (var in varNum) {
hist(datos[, var], main = paste0("Histograma variable ", var))
boxplot(datos[, var], main = paste0("Boxplot variable ", var))
}
library(ggplot2)
for (var in varNum) {
# Histograma
grafico <- ggplot(datos, aes(x = get(var))) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white")+
geom_density(alpha=.2, fill="#FF6666")  +
geom_vline(aes(xintercept = mean(get(var))),
color="blue", linetype = "dashed", linewidth = 1)
print(grafico)
# Boxplot
grafico2 <- ggplot(datos, aes(x=get(var))) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
print(grafico2)
}
for (var in varCat) {
tablaAbs <- data.frame(table(datos[, var]))
tablaFreq <- data.frame(table(datos[, var])/sum(table(datos[, var])))
m <- match(tablaAbs$Var1, tablaFreq$Var1)
tablaAbs[, "FreqRel"] <- tablaFreq[m, "Freq"]
colnames(tablaAbs) <- c("Categoria", "FreqAbs", "FreqRel")
cat("===============", var, "===================================\n")
print(tablaAbs)
cat("==================================================\n")
}
for (var in varCat) {
barplot(table(datos[, var]))
}
for (varN in varNum) {
for (varC in varCat) {
print(psych::describeBy(datos[, varN], group = datos[, varC]))
}
}
dades <- read.csv("material/Preprocessing/valentine_dataset.csv")
dades <- read.csv("E:/PROYECTOS/ramIA-lab_repositorio/MLforEducation/MLforEducation/material/Preprocessing/valentine_dataset.csv")
head(dades)
#| label: dades-valentine
#| echo: false
#| warning: false
#| message: false
#| error: false
dades <- read.csv("E:/PROYECTOS/ramIA-lab_repositorio/MLforEducation/MLforEducation/material/Preprocessing/valentine_dataset.csv")
tipus <- sapply(dades, class)
varNum <- names(tipus)[which(tipus %in% c("integer", "numeric"))]
varNum <- varNum[which(!varNum %in% c("Valentine_Date"))]
varCat <- names(tipus)[which(tipus %in% c("factor", "character"))]
mapply(function(x, name) {
cat("var. ", name, ": \n\t min: ", min(x), "\n\t max: ", max(x), "\n")
invisible(NULL)  # Evita la salida de valores NULL
}, dades[, varNum], colnames(dades[, varNum]))
library(EnvStats)
install.packages("EnvStats")
library(EnvStats)
IQROutlier <- function(variable, rmnas = TRUE) {
IQ <- iqr(variable, na.rm = rmnas)
intInf <- quantile(variable, probs = c(0.25, 0.75))[[1]] - 1.5*IQ
intSup <- quantile(variable, probs = c(0.25, 0.75))[[2]] + 1.5*IQ
posicions <- which(variable >= intSup | variable <= intInf)
if (length(posicions) > 0) {
cat("Existeixen outliers en les posicions:", paste0(posicions, collapse = ", "))
} else {
cat("No existeixen outliers")
}
return(posicions)
}
IQROutlier(dades[, "Age"])
IQROutlier(dades[, "Confidence_Score"])
library(ggplot2)
variable <- "Age"
boxplot(dades[, variable])
boxplot.stats(dades[, variable])$out
# Crear un boxplot
ggplot(dades, aes(y = get(variable))) +
geom_boxplot(fill = "skyblue", color = "black") +
labs(title = paste0("Boxplot de ", variable)) +
theme_minimal()
variable <- "Age"
valorEscalado <- scale(dades[, variable])
hist(valorEscalado)
ggplot(data.frame(valor = valorEscalado), aes(x = valor)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +  # Histograma
geom_vline(xintercept = c(3, -3), linetype = "dashed", color = "red", size = 1) + # Líneas horizontales
theme_minimal()
variable <- "Age"
lower_bound <- median(dades[, variable]) - 3 * mad(dades[, variable], constant = 1)
upper_bound <- median(dades[, variable]) + 3 * mad(dades[, variable], constant = 1)
outlier_ind <- which((dades[, variable] < lower_bound) | (dades[, variable] > upper_bound))
outlier_ind
library(outliers)
install.packages("outliers")
library(outliers)
variable <- "Age"
test <- outliers::grubbs.test(dades[, variable], opposite = TRUE)
# amb el paràmetre opposite controles quina de les dues cues están buscant
test
library(EnvStats)
variable <- "Age"
test <- EnvStats::rosnerTest(dades[, variable], k = 1)
test
library(scatterplot3d)
library(readr)
dades <- readr::read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/forestfires.csv")
dades <- data.frame(dades[, c("DC", "temp", "RH")])
scatterplot3d(dades[,"DC"], dades[, "temp"],dades[, "RH"])
library(rgl)
# Plot
plot3d(x = dades[, "DC"], y = dades[, "temp"], z = dades[, "RH"],
col = "black", type = 'p', radius = .1)
library(plotly)
fig <- plotly::plot_ly(dades, x = ~DC, y = ~temp, z = ~RH, size = 1) %>%
add_markers()
fig
library(mvoutlier)
install.packages("moutlier")
library(mvoutlier)
distancia_mahalanobis <- mahalanobis(dades, colMeans(dades), cov(dades))
plot(density(distancia_mahalanobis))
cutoff <- qchisq(p = 0.99, df = ncol(dades))
dades[distancia_mahalanobis>cutoff, ]
#| label: carregar-paquets
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library("factoextra")
library("FactoMineR")
library("gplots")
library("dplyr")
#| label: carregar-dades
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
data("housetasks")
head(housetasks)
colnames(housetasks) <- c("Dona", "Alternant", "Marit", "Conjuntament")
rownames(housetasks) <- c("Bugaderia", "Dinar", "Sopar", "Esmorçar", "Ordenar", "Netejar_Plats", "Compres", "Oficial", "Conduir", "Finances", "Assegurança", "Reparacions", "Vacances")
df <- as.table(as.matrix(housetasks))
df
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
balloonplot(t(df), label=F, main="Tareas del hogar")
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
chisq.test(housetasks)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
housetasks_CA <- CA(housetasks, graph = F)
print(housetasks_CA)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
housetasks_CA$col
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
housetasks_CA$row
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_screeplot(housetasks_CA, addlabel=T)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_ca_biplot(housetasks_CA,repel = T)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(corrplot)
corrplot(housetasks_CA$col$cos2)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
corrplot(housetasks_CA$row$cos2 )
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_contrib(housetasks_CA, choice = "col" ,axes = 1)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_contrib(housetasks_CA, choice = "col" ,axes = 2)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_contrib(housetasks_CA, choice = "col" ,axes = 1:2)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_contrib(housetasks_CA, choice = "row" ,axes = 1)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_contrib(housetasks_CA, choice = "row" ,axes = 2)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_contrib(housetasks_CA, choice = "row" ,axes = 1:2)
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
fviz_ca_biplot(housetasks_CA,repel = T, arrow = c(F,T), col.col = "cos2",
gradient.cols = c("red", "yellow", "green"),
alpha.col = "contrib")
